{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\nimport { components } from \"@octokit/openapi-types\";\r\n\r\nasync function checkWorkflow(token:string, owner:string, repo: string, statusToCheck: components[\"parameters\"][\"workflow-run-status\"], currentRunId: string, runnerLabel: string): Promise<boolean> {\r\n  let foundRunningJob = false;\r\n\r\n  const octokit = github.getOctokit(token);\r\n\r\n  const listWorkflowRunsForRepoResult = await octokit.rest.actions\r\n  .listWorkflowRunsForRepo({\r\n    owner,\r\n    repo,\r\n    status: statusToCheck\r\n  });\r\n\r\n  core.info(`Received status code: ${listWorkflowRunsForRepoResult.status}, number or results: ${listWorkflowRunsForRepoResult.data.total_count}`);\r\n\r\n  let workFlowRunsFiltered = listWorkflowRunsForRepoResult.data.workflow_runs.filter((f)=> f.id != Number(currentRunId));\r\n\r\n  const workFlowRunsMapped = workFlowRunsFiltered.map((x) => ({\r\n    run_id: x.id,\r\n    name: x.name\r\n  }));\r\n\r\n  for (const workFlowRun of workFlowRunsMapped) {\r\n    const listJobsForWorkflowRunResult = await octokit.rest.actions\r\n    .listJobsForWorkflowRun({\r\n      owner,\r\n      repo,\r\n      run_id: workFlowRun.run_id\r\n    });\r\n\r\n    core.info(`Received status code: ${listJobsForWorkflowRunResult.status}, number or results: ${listJobsForWorkflowRunResult.data.total_count}`);\r\n\r\n    for (const job of listJobsForWorkflowRunResult.data.jobs){\r\n      if (job.labels.includes(runnerLabel)){\r\n        foundRunningJob = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundRunningJob)\r\n      break;\r\n  }\r\n\r\n  // conclusion is null when run is in progress\r\n    core.info(`foundRunningJob for status ${statusToCheck}: ${foundRunningJob}`);\r\n\r\n    return foundRunningJob;\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const currentRunId = core.getInput('currentRunId', {required: true});\r\n    const runnerLabel = core.getInput('runnerLabel', {required: true});\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    core.info(`Checking if there are any running runners with lable ${runnerLabel} which are different to run id ${currentRunId}`);\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n    const octokit = github.getOctokit(token);\r\n\r\n    var foundRunningJob = false\r\n\r\n    // loop through all statuses to check if we have any other running jobs\r\n    var statusesToCheck:components[\"parameters\"][\"workflow-run-status\"][] = [\"requested\", \"queued\", \"in_progress\", \"waiting\"];\r\n    for (const statusToCheck of statusesToCheck) {\r\n      foundRunningJob = await checkWorkflow(token, owner, repo, statusToCheck, currentRunId, runnerLabel);\r\n      if (foundRunningJob)\r\n        break;\r\n    }\r\n\r\n    // conclusion is null when run is in progress\r\n    core.info(`foundRunningJob: ${foundRunningJob}`);\r\n    core.setOutput('foundRunningJob', foundRunningJob);\r\n\r\n  } catch (ex) {\r\n    core.setFailed(`Failed with error: ${ex}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}