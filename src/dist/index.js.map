{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as core from '@actions/core';\r\nimport { components } from \"@octokit/openapi-types\";\r\nimport { Octokit } from '@octokit/rest';\r\nimport {\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository\r\n} from './utils';\r\nimport { createActionAuth } from \"@octokit/auth-action\";\r\n\r\nasync function checkWorkflow(octokit: Octokit, token: string, owner: string, repo: string, statusToCheck: components[\"parameters\"][\"workflow-run-status\"], currentRunId: string, runnerLabel: string): Promise<boolean> {\r\n  let foundRunningJob = false;\r\n\r\n  core.info(`Start checking for status ${statusToCheck}.`);\r\n\r\n  core.info(`Using owner ${owner} and repo ${repo}.`);\r\n\r\n  const listWorkflowRunsForRepoResult = await octokit.request(\"GET /repos/{owner}/{repo}/actions/runs\", {\r\n    owner: owner,\r\n    repo: repo,\r\n    status: statusToCheck\r\n  });\r\n  /*\r\n  // this call doesn't work, it looks like owner and repo don't get replaced in the URL\r\n  octokit.rest.actions.listWorkflowRunsForRepo()\r\n  const listWorkflowRunsForRepoResult = await octokit.actions.listWorkflowRunsForRepo({\r\n    owner: owner,\r\n    repo: repo,\r\n    status: statusToCheck\r\n  });\r\n  */\r\n  core.info(`Check Runs: Received status code: ${listWorkflowRunsForRepoResult.status}, number or results: ${listWorkflowRunsForRepoResult.data.total_count}.`);\r\n\r\n  let workFlowRunsFiltered = listWorkflowRunsForRepoResult.data.workflow_runs.filter((f) => f.id != Number(currentRunId));\r\n\r\n  const workFlowRunsMapped = workFlowRunsFiltered.map((x) => ({\r\n    run_id: x.id,\r\n    name: x.name\r\n  }));\r\n\r\n  for (const workFlowRun of workFlowRunsMapped) {\r\n    core.info(`Checking for jobs with status ${statusToCheck} and runner lable ${runnerLabel}.`);\r\n    const listJobsForWorkflowRunResult = await octokit.rest.actions\r\n      .listJobsForWorkflowRun({\r\n        owner,\r\n        repo,\r\n        run_id: workFlowRun.run_id\r\n      });\r\n\r\n    core.info(`Check Workflow Run ${workFlowRun.run_id} with name '${workFlowRun.name}'. Received status code: ${listJobsForWorkflowRunResult.status}, number or results: ${listJobsForWorkflowRunResult.data.total_count}.`);\r\n\r\n    for (const job of listJobsForWorkflowRunResult.data.jobs) {\r\n      if (job.labels.includes(runnerLabel)) {\r\n        foundRunningJob = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundRunningJob)\r\n      break;\r\n  }\r\n\r\n  // conclusion is null when run is in progress\r\n  core.info(`End checking for status ${statusToCheck}. foundRunningJob: ${foundRunningJob}`);\r\n\r\n  return foundRunningJob;\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', { required: true });\r\n    const currentRunId = core.getInput('currentRunId', { required: true });\r\n    const runnerLabel = core.getInput('runnerLabel', { required: true });\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking if there are any running runners with lable ${runnerLabel} which are different to run id ${currentRunId}`);\r\n\r\n    var foundRunningJob = false\r\n\r\n    const auth = createActionAuth();\r\n    const authentication = await auth();\r\n    core.info(`Auth token type ${authentication.tokenType}, token ${authentication.token.length}, owner ${owner}, repo ${repo}`);\r\n    const octokit = new Octokit({ auth: authentication.token });\r\n\r\n    // loop through all statuses to check if we have any other running jobs\r\n    var statusesToCheck: components[\"parameters\"][\"workflow-run-status\"][] = [\"pending\", \"requested\", \"queued\", \"in_progress\"];\r\n    for (const statusToCheck of statusesToCheck) {\r\n      foundRunningJob = await checkWorkflow(octokit, token, owner, repo, statusToCheck, currentRunId, runnerLabel);\r\n      if (foundRunningJob)\r\n        break;\r\n    }\r\n\r\n    // conclusion is null when run is in progress\r\n    core.info(`foundRunningJob: ${foundRunningJob}`);\r\n    core.setOutput('foundRunningJob', foundRunningJob);\r\n\r\n  } catch (ex) {\r\n    const error = ensureError(ex)\r\n    core.setFailed(`Failed with error: ${error.message}.`);\r\n  }\r\n}\r\n\r\nfunction ensureError(value: unknown): Error {\r\n  if (value instanceof Error) return value\r\n\r\n  let stringified = '[Unable to stringify the thrown value]'\r\n  try {\r\n    stringified = JSON.stringify(value)\r\n  } catch { }\r\n\r\n  const error = new Error(`This value was thrown as is, not through an Error: ${stringified}`)\r\n  return error\r\n}\r\n\r\nrun();\r\n"]}