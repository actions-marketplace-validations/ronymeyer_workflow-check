{"version":3,"sources":["index.ts"],"names":["core","require","rest_1","utils_1","checkWorkflow","token","owner","repo","statusToCheck","currentRunId","runnerLabel","Promise","foundRunningJob","octo","Octokit","actions","listWorkflowRunsForRepo","rest","status","listWorkflowRunsForRepoResult","_c","sent","info","data","total_count","workFlowRunsFiltered","workflow_runs","filter","f","id","Number","workFlowRunsMapped","map","x","run_id","name","workFlowRunsMapped_1","_i","length","workFlowRun","listJobsForWorkflowRun","listJobsForWorkflowRunResult","_a","_b","jobs","labels","includes","run","getInput","required","undefined","fullRepo","getOptionalInput","getRepository","getOwnerAndRepo","statusesToCheck_1","setOutput","setFailed","ex_1"],"mappings":"y7CAAA,IAAAA,KAAAC,QAAA,iBAEAC,OAAAD,QAAA,iBACAE,QAAAF,QAAA,WAMA,SAAeG,cAAcC,EAAeC,EAAeC,EAAcC,EAAgEC,EAAsBC,gCAAsBC,QAAO,gGAKpJ,OAJlCC,GAAkB,GAEhBC,EAAO,IAAIX,OAAAY,SACZC,QAAQC,0BACyB,CAAA,EAAMH,EAAKI,KAAKF,QAAQC,wBAAwB,CACpFV,MAAKA,EACLC,KAAIA,EACJW,OAAQV,YAHJW,EAAgCC,EAAAC,OAMtCrB,KAAKsB,KAAK,yBAAyBH,EAA8BD,OAAM,wBAAwBC,EAA8BI,KAAKC,aAE9HC,EAAuBN,EAA8BI,KAAKG,cAAcC,OAAO,SAACC,GAAM,OAAAA,EAAEC,IAAMC,OAAOrB,KAEnGsB,EAAqBN,EAAqBO,IAAI,SAACC,GAAM,MAAA,CACzDC,OAAQD,EAAEJ,GACVM,KAAMF,EAAEE,YAGgBC,EAAAL,0BAAAM,EAAAD,EAAAE,QAAfC,EAAWH,EAAAC,GACiB,CAAA,EAAMxB,EAAKI,KAAKF,QAClDyB,uBAAuB,CACtBlC,MAAKA,EACLC,KAAIA,EACJ2B,OAAQK,EAAYL,WALkB,CAAA,EAAA,UAU1C,IATMO,EAA+BrB,EAAAC,OAOrCrB,KAAKsB,KAAK,yBAAyBmB,EAA6BvB,OAAM,wBAAwBuB,EAA6BlB,KAAKC,aAEhIkB,EAAA,EAAkBC,EAAAF,EAA6BlB,KAAKqB,KAAlCF,EAAAC,EAAAL,OAAAI,IAChB,GADYC,EAAAD,GACJG,OAAOC,SAASpC,GAAc,CACpCE,GAAkB,EAClB,MAGJ,GAAIA,EACF,MAAA,CAAA,EAAA,2BAjBsByB,iBAuB1B,OAFArC,KAAKsB,KAAK,8BAA8Bd,EAAa,KAAKI,GAE1D,CAAA,EAAOA,QAGT,SAAemC,mCAAOpC,QAAO,wHAEnBN,EAAQL,KAAKgD,SAAS,QAAS,CAAEC,UAAU,IAC3CxC,EAAeT,KAAKgD,SAAS,eAAgB,CAAEC,UAAU,IACzDvC,EAAcV,KAAKgD,SAAS,cAAe,CAAEC,UAAU,SAE5CC,KADbC,EAAWhD,QAAAiD,iBAAiB,WAE9BD,EAAWhD,QAAAkD,iBAGbrD,KAAKsB,KAAK,wDAAwDZ,EAAW,kCAAkCD,GAEzGiC,EAAgBvC,QAAAmD,gBAAgBH,GAA/B7C,EAAKoC,EAAA,GAAEnC,EAAImC,EAAA,GAEd9B,GAAkB,MAIM2C,EAD6C,CAAC,YAAa,SAAU,cAAe,mCACpFlB,EAAAkB,EAAAjB,QAAjB9B,EAAa+C,EAAAlB,GACJ,CAAA,EAAMjC,cAAcC,EAAOC,EAAOC,EAAMC,EAAeC,EAAcC,KAD9C,CAAA,EAAA,UAEzC,GADAE,EAAkB+B,EAAAtB,OAEhB,MAAA,CAAA,EAAA,2BAHwBgB,wBAO5BrC,KAAKsB,KAAK,oBAAoBV,GAC9BZ,KAAKwD,UAAU,kBAAmB5C,kCAGlCZ,KAAKyD,UAAU,sBAAsBC,+BAIzCX","file":"index.min.js","sourcesContent":["import * as core from '@actions/core';\r\nimport { components } from \"@octokit/openapi-types\";\r\nimport { Octokit } from '@octokit/rest';\r\nimport {\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository\r\n} from './utils';\r\n\r\nasync function checkWorkflow(token: string, owner: string, repo: string, statusToCheck: components[\"parameters\"][\"workflow-run-status\"], currentRunId: string, runnerLabel: string): Promise<boolean> {\r\n  let foundRunningJob = false;\r\n\r\n  const octo = new Octokit();\r\n  octo.actions.listWorkflowRunsForRepo()\r\n  const listWorkflowRunsForRepoResult = await octo.rest.actions.listWorkflowRunsForRepo({\r\n    owner,\r\n    repo,\r\n    status: statusToCheck\r\n  });\r\n\r\n  core.info(`Received status code: ${listWorkflowRunsForRepoResult.status}, number or results: ${listWorkflowRunsForRepoResult.data.total_count}`);\r\n\r\n  let workFlowRunsFiltered = listWorkflowRunsForRepoResult.data.workflow_runs.filter((f) => f.id != Number(currentRunId));\r\n\r\n  const workFlowRunsMapped = workFlowRunsFiltered.map((x) => ({\r\n    run_id: x.id,\r\n    name: x.name\r\n  }));\r\n\r\n  for (const workFlowRun of workFlowRunsMapped) {\r\n    const listJobsForWorkflowRunResult = await octo.rest.actions\r\n      .listJobsForWorkflowRun({\r\n        owner,\r\n        repo,\r\n        run_id: workFlowRun.run_id\r\n      });\r\n\r\n    core.info(`Received status code: ${listJobsForWorkflowRunResult.status}, number or results: ${listJobsForWorkflowRunResult.data.total_count}`);\r\n\r\n    for (const job of listJobsForWorkflowRunResult.data.jobs) {\r\n      if (job.labels.includes(runnerLabel)) {\r\n        foundRunningJob = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundRunningJob)\r\n      break;\r\n  }\r\n\r\n  // conclusion is null when run is in progress\r\n  core.info(`foundRunningJob for status ${statusToCheck}: ${foundRunningJob}`);\r\n\r\n  return foundRunningJob;\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', { required: true });\r\n    const currentRunId = core.getInput('currentRunId', { required: true });\r\n    const runnerLabel = core.getInput('runnerLabel', { required: true });\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    core.info(`Checking if there are any running runners with lable ${runnerLabel} which are different to run id ${currentRunId}`);\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    var foundRunningJob = false\r\n\r\n    // loop through all statuses to check if we have any other running jobs\r\n    var statusesToCheck: components[\"parameters\"][\"workflow-run-status\"][] = [\"requested\", \"queued\", \"in_progress\", \"pending\"];\r\n    for (const statusToCheck of statusesToCheck) {\r\n      foundRunningJob = await checkWorkflow(token, owner, repo, statusToCheck, currentRunId, runnerLabel);\r\n      if (foundRunningJob)\r\n        break;\r\n    }\r\n\r\n    // conclusion is null when run is in progress\r\n    core.info(`foundRunningJob: ${foundRunningJob}`);\r\n    core.setOutput('foundRunningJob', foundRunningJob);\r\n\r\n  } catch (ex) {\r\n    core.setFailed(`Failed with error: ${ex}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}