{"version":3,"sources":["index.ts"],"names":["core","require","rest_1","utils_1","checkWorkflow","octokit","token","owner","repo","statusToCheck","currentRunId","runnerLabel","Promise","foundRunningJob","request","status","listWorkflowRunsForRepoResult","_c","sent","info","data","total_count","workFlowRunsFiltered","workflow_runs","filter","f","id","Number","workFlowRunsMapped","map","x","run_id","name","workFlowRunsMapped_1","_i","length","workFlowRun","rest","actions","listJobsForWorkflowRun","listJobsForWorkflowRunResult","_a","_b","jobs","labels","includes","run","getInput","required","undefined","fullRepo","getOptionalInput","getRepository","getOwnerAndRepo","Octokit","statusesToCheck_1","setOutput","setFailed","ex_1"],"mappings":"y7CAAA,IAAAA,KAAAC,QAAA,iBAEAC,OAAAD,QAAA,iBACAE,QAAAF,QAAA,WAOA,SAAeG,cAAcC,EAAkBC,EAAeC,EAAeC,EAAcC,EAAgEC,EAAsBC,gCAAsBC,QAAO,8FAGtK,OAFlCC,GAAkB,EAEgB,CAAA,EAAMR,EAAQS,QAAQ,yCAA0C,CACpGP,MAAOA,EACPC,KAAMA,EACNO,OAAQN,YAHJO,EAAgCC,EAAAC,OActClB,KAAKmB,KAAK,qCAAqCH,EAA8BD,OAAM,wBAAwBC,EAA8BI,KAAKC,aAE1IC,EAAuBN,EAA8BI,KAAKG,cAAcC,OAAO,SAACC,GAAM,OAAAA,EAAEC,IAAMC,OAAOjB,KAEnGkB,EAAqBN,EAAqBO,IAAI,SAACC,GAAM,MAAA,CACzDC,OAAQD,EAAEJ,GACVM,KAAMF,EAAEE,YAGgBC,EAAAL,0BAAAM,EAAAD,EAAAE,QAAfC,EAAWH,EAAAC,GACiB,CAAA,EAAM7B,EAAQgC,KAAKC,QACrDC,uBAAuB,CACtBhC,MAAKA,EACLC,KAAIA,EACJuB,OAAQK,EAAYL,WALkB,CAAA,EAAA,UAU1C,IATMS,EAA+BvB,EAAAC,OAOrClB,KAAKmB,KAAK,sBAAsBiB,EAAYL,OAAM,cAAcK,EAAYJ,KAAI,2BAA2BQ,EAA6BzB,OAAM,wBAAwByB,EAA6BpB,KAAKC,aAExMoB,EAAA,EAAkBC,EAAAF,EAA6BpB,KAAKuB,KAAlCF,EAAAC,EAAAP,OAAAM,IAChB,GADYC,EAAAD,GACJG,OAAOC,SAASlC,GAAc,CACpCE,GAAkB,EAClB,MAGJ,GAAIA,EACF,MAAA,CAAA,EAAA,2BAjBsBqB,iBAuB1B,OAFAlC,KAAKmB,KAAK,8BAA8BV,EAAa,KAAKI,GAE1D,CAAA,EAAOA,QAGT,SAAeiC,mCAAOlC,QAAO,0HAEnBN,EAAQN,KAAK+C,SAAS,QAAS,CAAEC,UAAU,IAC3CtC,EAAeV,KAAK+C,SAAS,eAAgB,CAAEC,UAAU,IACzDrC,EAAcX,KAAK+C,SAAS,cAAe,CAAEC,UAAU,SAE5CC,KADbC,EAAW/C,QAAAgD,iBAAiB,WAE9BD,EAAW/C,QAAAiD,iBAEPX,EAAgBtC,QAAAkD,gBAAgBH,GAA/B3C,EAAKkC,EAAA,GAAEjC,EAAIiC,EAAA,GAElBzC,KAAKmB,KAAK,cAAc+B,EAAQ,WAAW3C,EAAK,UAAUC,GAE1DR,KAAKmB,KAAK,wDAAwDR,EAAW,kCAAkCD,GAG3GG,GAAkB,EAEhBR,EAAU,IAAIH,OAAAoD,YAIQC,EAD6C,CAAC,UAAW,YAAa,SAAU,uCAChFrB,EAAAqB,EAAApB,QAAjB1B,EAAa8C,EAAArB,GACJ,CAAA,EAAM9B,cAAcC,EAASC,EAAOC,EAAOC,EAAMC,EAAeC,EAAcC,KADvD,CAAA,EAAA,UAEzC,GADAE,EAAkB6B,EAAAxB,OAEhB,MAAA,CAAA,EAAA,2BAHwBgB,wBAO5BlC,KAAKmB,KAAK,oBAAoBN,GAC9Bb,KAAKwD,UAAU,kBAAmB3C,kCAGlCb,KAAKyD,UAAU,sBAAsBC,+BAIzCZ","file":"index.min.js","sourcesContent":["import * as core from '@actions/core';\r\nimport { components } from \"@octokit/openapi-types\";\r\nimport { Octokit } from '@octokit/rest';\r\nimport {\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository\r\n} from './utils';\r\nimport { createActionAuth } from \"@octokit/auth-action\";\r\n\r\nasync function checkWorkflow(octokit: Octokit, token: string, owner: string, repo: string, statusToCheck: components[\"parameters\"][\"workflow-run-status\"], currentRunId: string, runnerLabel: string): Promise<boolean> {\r\n  let foundRunningJob = false;\r\n\r\n  const listWorkflowRunsForRepoResult = await octokit.request(\"GET /repos/{owner}/{repo}/actions/runs\", {\r\n    owner: owner,\r\n    repo: repo,\r\n    status: statusToCheck\r\n  });\r\n  /*\r\n  // this call doesn't work, it looks like owner and repo don't get replaced in the URL\r\n  octokit.rest.actions.listWorkflowRunsForRepo()\r\n  const listWorkflowRunsForRepoResult = await octokit.actions.listWorkflowRunsForRepo({\r\n    owner: owner,\r\n    repo: repo,\r\n    status: statusToCheck\r\n  });\r\n  */\r\n  core.info(`Check Runs: Received status code: ${listWorkflowRunsForRepoResult.status}, number or results: ${listWorkflowRunsForRepoResult.data.total_count}`);\r\n\r\n  let workFlowRunsFiltered = listWorkflowRunsForRepoResult.data.workflow_runs.filter((f) => f.id != Number(currentRunId));\r\n\r\n  const workFlowRunsMapped = workFlowRunsFiltered.map((x) => ({\r\n    run_id: x.id,\r\n    name: x.name\r\n  }));\r\n\r\n  for (const workFlowRun of workFlowRunsMapped) {\r\n    const listJobsForWorkflowRunResult = await octokit.rest.actions\r\n      .listJobsForWorkflowRun({\r\n        owner,\r\n        repo,\r\n        run_id: workFlowRun.run_id\r\n      });\r\n\r\n    core.info(`Check Workflow Run ${workFlowRun.run_id} with name ${workFlowRun.name}: Received status code: ${listJobsForWorkflowRunResult.status}, number or results: ${listJobsForWorkflowRunResult.data.total_count}`);\r\n\r\n    for (const job of listJobsForWorkflowRunResult.data.jobs) {\r\n      if (job.labels.includes(runnerLabel)) {\r\n        foundRunningJob = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundRunningJob)\r\n      break;\r\n  }\r\n\r\n  // conclusion is null when run is in progress\r\n  core.info(`foundRunningJob for status ${statusToCheck}: ${foundRunningJob}`);\r\n\r\n  return foundRunningJob;\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', { required: true });\r\n    const currentRunId = core.getInput('currentRunId', { required: true });\r\n    const runnerLabel = core.getInput('runnerLabel', { required: true });\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Full Repot ${fullRepo}, owner ${owner}, repo ${repo}`);\r\n\r\n    core.info(`Checking if there are any running runners with lable ${runnerLabel} which are different to run id ${currentRunId}`);\r\n\r\n\r\n    var foundRunningJob = false\r\n\r\n    const octokit = new Octokit();\r\n\r\n    // loop through all statuses to check if we have any other running jobs\r\n    var statusesToCheck: components[\"parameters\"][\"workflow-run-status\"][] = [\"pending\", \"requested\", \"queued\", \"in_progress\"];\r\n    for (const statusToCheck of statusesToCheck) {\r\n      foundRunningJob = await checkWorkflow(octokit, token, owner, repo, statusToCheck, currentRunId, runnerLabel);\r\n      if (foundRunningJob)\r\n        break;\r\n    }\r\n\r\n    // conclusion is null when run is in progress\r\n    core.info(`foundRunningJob: ${foundRunningJob}`);\r\n    core.setOutput('foundRunningJob', foundRunningJob);\r\n\r\n  } catch (ex) {\r\n    core.setFailed(`Failed with error: ${ex}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}