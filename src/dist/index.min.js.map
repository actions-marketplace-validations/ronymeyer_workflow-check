{"version":3,"sources":["index.ts"],"names":["core","require","github","utils_1","run","Promise","token","getInput","required","currentRunId_1","runnerLabel","undefined","fullRepo","getOptionalInput","getRepository","_a","getOwnerAndRepo","owner","repo","info","octokit","getOctokit","foundRunningJob","rest","actions","listWorkflowRunsForRepo","status","listWorkflowRunsForRepoResult","_d","sent","data","total_count","workFlowRunsFiltered","workflow_runs","filter","f","id","Number","workFlowRunsMapped","map","x","run_id","name","workFlowRunsMapped_1","_i","length","workFlowRun","listJobsForWorkflowRun","listJobsForWorkflowRunResult","_b","_c","jobs","labels","includes","setOutput","setFailed","ex_1"],"mappings":"y7CAAA,IAAAA,KAAAC,QAAA,iBACAC,OAAAD,QAAA,mBACAE,QAAAF,QAAA,WAUA,SAAeG,mCAAOC,QAAO,gHAqBa,6BAnBhCC,EAAQN,KAAKO,SAAS,QAAS,CAACC,UAAU,IAC1CC,EAAeT,KAAKO,SAAS,eAAgB,CAACC,UAAU,IACxDE,EAAcV,KAAKO,SAAS,cAAe,CAACC,UAAU,SAE3CG,KADbC,EAAWT,QAAAU,iBAAiB,WAE9BD,EAAWT,QAAAW,iBAGPC,EAAgBZ,QAAAa,gBAAgBJ,GAA/BK,EAAKF,EAAA,GAAEG,EAAIH,EAAA,GAElBf,KAAKmB,KAAK,wDAAwDT,EAAW,kCAAkCD,GAEzGW,EAAUlB,OAAOmB,WAAWf,GAE9BgB,GAAkB,EACM,KAGN,cACgB,CAAA,EAAMF,EAAQG,KAAKC,QACxDC,wBAAwB,CACvBR,MAAKA,EACLC,KAAIA,EACJQ,OALoB,wBAChBC,EAAgCC,EAAAC,OAOtC7B,KAAKmB,KAAK,yBAAyBQ,EAA8BD,OAAM,wBAAwBC,EAA8BG,KAAKC,aAE9HC,EAAuBL,EAA8BG,KAAKG,cAAcC,OAAO,SAACC,GAAK,OAAAA,EAAEC,IAAMC,OAAO5B,KAElG6B,EAAqBN,EAAqBO,IAAI,SAACC,GAAM,MAAA,CACzDC,OAAQD,EAAEJ,GACVM,KAAMF,EAAEE,YAGgBC,EAAAL,0BAAAM,EAAAD,EAAAE,QAAfC,EAAWH,EAAAC,GACiB,CAAA,EAAMxB,EAAQG,KAAKC,QACvDuB,uBAAuB,CACtB9B,MAAKA,EACLC,KAAIA,EACJuB,OAAQK,EAAYL,WALoB,CAAA,EAAA,UAU1C,IATMO,EAA+BpB,EAAAC,OAOrC7B,KAAKmB,KAAK,yBAAyB6B,EAA6BtB,OAAM,wBAAwBsB,EAA6BlB,KAAKC,aAEhIkB,EAAA,EAAkBC,EAAAF,EAA6BlB,KAAKqB,KAAlCF,EAAAC,EAAAL,OAAAI,IAChB,GADYC,EAAAD,GACJG,OAAOC,SAAS3C,GAAa,CACnCY,GAAkB,EAClB,MAGJ,GAAIA,EACF,MAAA,CAAA,EAAA,2BAjBsBsB,wBAqBxB5C,KAAKmB,KAAK,oBAAoBG,GAE9BtB,KAAKsD,UAAU,kBAAmBhC,kCAEpCtB,KAAKuD,UAAU,sBAAsBC,+BAIzCpD","file":"index.min.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\n\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const currentRunId = core.getInput('currentRunId', {required: true});\r\n    const runnerLabel = core.getInput('runnerLabel', {required: true});\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking if there are any running runners with lable ${runnerLabel} which are different to run id ${currentRunId}`);\r\n\r\n    const octokit = github.getOctokit(token);\r\n\r\n    let foundRunningJob = false;\r\n    let status: string | null = null;\r\n    let conclusion: string | null = null;\r\n\r\n    const statusToCheck = \"in_progress\";\r\n    const listWorkflowRunsForRepoResult = await octokit.rest.actions\r\n    .listWorkflowRunsForRepo({\r\n      owner,\r\n      repo,\r\n      status: statusToCheck\r\n    });\r\n\r\n    core.info(`Received status code: ${listWorkflowRunsForRepoResult.status}, number or results: ${listWorkflowRunsForRepoResult.data.total_count}`);\r\n\r\n    let workFlowRunsFiltered = listWorkflowRunsForRepoResult.data.workflow_runs.filter((f)=> f.id != Number(currentRunId));\r\n\r\n    const workFlowRunsMapped = workFlowRunsFiltered.map((x) => ({\r\n      run_id: x.id,\r\n      name: x.name\r\n    }));\r\n\r\n    for (const workFlowRun of workFlowRunsMapped) {\r\n      const listJobsForWorkflowRunResult = await octokit.rest.actions\r\n      .listJobsForWorkflowRun({\r\n        owner,\r\n        repo,\r\n        run_id: workFlowRun.run_id\r\n      });\r\n\r\n      core.info(`Received status code: ${listJobsForWorkflowRunResult.status}, number or results: ${listJobsForWorkflowRunResult.data.total_count}`);\r\n\r\n      for (const job of listJobsForWorkflowRunResult.data.jobs){\r\n        if (job.labels.includes(runnerLabel)){\r\n          foundRunningJob = true;\r\n          break;\r\n        }\r\n      }\r\n      if (foundRunningJob)\r\n        break;\r\n    }\r\n\r\n    // conclusion is null when run is in progress\r\n      core.info(`foundRunningJob: ${foundRunningJob}`);\r\n\r\n      core.setOutput('foundRunningJob', foundRunningJob);\r\n  } catch (ex) {\r\n    core.setFailed(`Failed with error: ${ex}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}